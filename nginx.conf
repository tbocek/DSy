events {
    worker_connections 1024;

}

http {
    resolver 127.0.0.11 valid=1s;
    upstream go-service-backend {
        # Simple round-robin load balancing
        # Nginx will automatically resolve service names to all container IPs
        zone go-service-backend 64k;
        server DSy-go-service-2:8080 resolve;
        server DSy-go-service-3:8080 resolve;
        # Other load balancing methods:
        # least_conn;       # Send to the server with fewest active connections
        # ip_hash;          # Based on client IP (simple form of session persistence)
        # hash $request_uri; # Based on URI
    }

    server {
        listen 80;

        location / {
            proxy_pass http://go-service-backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Passive health checks - mark server as unavailable if it fails
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_timeout 5s;
            proxy_next_upstream_tries 3;
        }
    }
}